#!/usr/bin/python3
#
# Export modules in CIL format
#
import logging
import re
import argparse
from semanage import semanage_handle_create, semanage_connect, \
    semanage_module_list, semanage_module_info_get_name, \
    semanage_module_key_create, semanage_module_get_module_info, \
    semanage_module_info_get_priority, semanage_module_key_set_priority, \
    semanage_module_extract, semanage_module_list_nth, semanage_module_key_set_name
import os.path

logger = logging.getLogger(__name__)

dist_modules = {}
with open("ignore_modules.txt", "r") as f:
   for module in f:
      module = module.rstrip()
      dist_modules[module] = True

parser = argparse.ArgumentParser()
parser.add_argument('--output-dir', '-o', help="Output directory for SELinux module dump.", default=".", action="store")
parser.add_argument('--overwrite-existing', help="Overwrite existing files.", action="store_true")
parser.add_argument('--include', '-i', help="Include modules matching regexp", action="store")
parser.add_argument('--exclude-from', '-X', help="Exclude modules listed in FILE", action="store")
parser.add_argument('--verbose', '-v', help="Be verbose about it", action="store_true")

args = parser.parse_args()
# need to canonicalize this?
output_dir = args.output_dir

sh = semanage_handle_create()
if semanage_connect(sh):
   exit(1)
   
(a, modinfos, b) = semanage_module_list(sh)
i = 0
while i < b:
      module = semanage_module_list_nth(modinfos, i)
      (c, name) = semanage_module_info_get_name(sh, module)
      i = i + 1

      if args.verbose:
         print("Encountering module %s" % name)
      
      if args.include and not re.match(args.include, name):
         if args.verbose:
            print("Include specified and no match, skipping")
         continue

#      if name in dist_modules:
#         continue

      (result, modkey) = semanage_module_key_create(sh)
      semanage_module_key_set_name(sh, modkey, name)

      (result, info) = semanage_module_get_module_info(sh, modkey)
      (result, priority) = semanage_module_info_get_priority(sh, info)
      semanage_module_key_set_priority(sh, modkey, priority)

      (result,module_content,*x) = semanage_module_extract(sh, modkey, True)
      base_fname = name + ".cil"
      fname = output_dir + "/" + base_fname
      if args.verbose:
         print("writing to file %s" % fname)
      if os.path.exists(fname) and not args.overwrite_existing:
         print("File '%s' exists, not overwriting." % fname)
         continue
      
      with open(fname, "w") as f:
         f.write(module_content)

